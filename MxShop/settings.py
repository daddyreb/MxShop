"""
Django settings for MxShop project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  #获取项目根目录
sys.path.insert(0,BASE_DIR)  #配置apps路径
sys.path.insert(0,os.path.join(BASE_DIR, 'apps'))  #配置apps路径
sys.path.insert(0,os.path.join(BASE_DIR, 'extra_apps'))  #配置apps路径



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3797o9te)k20d6-bwm4v-9roodg9fy_cnjll7!8)+^nm3^+mga'   #登录，加密和解密的密钥
                                                                            #每次生成项目的时候，这个密钥是不一样的

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['*']  #在这里请求的host添加了*可以使用域名访问

AUTH_USER_MODEL = 'users.UserProfile'   #配置UserProfile替换系统的User


# Application definition

INSTALLED_APPS = [    #凡是有表的都必须放在INSTALLED_APPS，放在这里，django会在初始化的时候建对应的表
    'django.contrib.admin',   #配置admin
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig', #注册user
    'DjangoUeditor',   #注册DjangoUeditor
    'goods.apps.GoodsConfig',   #注册
    'trade.apps.TradeConfig',    #注册
    'user_operation.apps.UserOperationConfig',   #注册
    'crispy_forms',  # 注册xadmin的依赖应用crispy_forms
    'django_filters', #注册django_filters
    'xadmin',  # 注册xadmin
    'rest_framework',   #配置rest_framework
    'corsheaders',  #配置corsheaders,跨域名配置使用   3---1
    'rest_framework.authtoken',  #配置drf的authtoken
    'social_django',   #配置social_django，第三方登录开源库
    'raven.contrib.django.raven_compat',   #配置raven

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  #跨域配置 3---2
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ORIGIN_ALLOW_ALL = True   #跨域配置 3---3
ROOT_URLCONF = 'MxShop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',#配置第三方登录Templates
                'social_django.context_processors.login_redirect',  # 配置第三方登录Templates
            ],
        },
    },
]

WSGI_APPLICATION = 'MxShop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'vue_shop',
        'USER':'root',
        'PASSWORD':'root',
        'HOST':'127.0.0.1',
        'OPTIONS':{'init_command':'SET storage_engine=INNODB;'}  #设置数据库为INNODB，为第三方数据库登录用
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'
#
# TIME_ZONE = 'UTC'
#
# USE_I18N = True
#
# USE_L10N = True
#
# USE_TZ = True

#设置时区
LANGUAGE_CODE = 'zh-hans'  #中文支持，django1.8以后支持；1.8以前是zh-cn
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False   #默认是Ture，时间是utc时间，由于我们要用本地时间，所用手动修改为false！！！！

AUTHENTICATION_BACKENDS = (      #配置自定义登录校验函数
    'users.views.CustomBackend',   #自定义的Backend，CustomBackend
    'social_core.backends.weibo.WeiboOAuth2',#配置微博的backend
    'social_core.backends.qq.QQOAuth2',#配置微信的backend
    'social_core.backends.weixin.WeixinOAuth2',#配置微信的backend
    'django.contrib.auth.backends.ModelBackend',   #django自己的ModelBackend
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR,"static"),    #配置静态文件路径,","一定不要忘记加上逗号
)

#访问图片需要加的配置，还需要在url中做相应配置
MEDIA_URL = "/media/"   #配置访问图片的路径
MEDIA_ROOT = os.path.join(BASE_DIR, "media")   #django默认是不识别media的，要将media配置为MEDIA_ROOT 后才能识别它是存放图片的路径

# #rest freamework 的配置，所有关于rest freamework的配置都要放在 REST_FRAMEWORK中
# #源码中 site-packages 下rest_framework 下 settings.py中有关于rest freamework 所有的配置量
# REST_FRAMEWORK = {
#     'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.PageNumberPagination',   #配置分页
#     'PAGE_SIZE':10,   #配置分页  ，10个一页
# }

# REST_FRAMEWORK = {
#     'DEFAULT_FILTER_BACKENDS':'django_filters.rest_framework.DjangoFilterBackend',   #配置精确过滤为
#
# }

REST_FRAMEWORK = {
       'DEFAULT_AUTHENTICATION_CLASSES': (                                        #配置登录设置，不配置，默认设置就是如此
        'rest_framework.authentication.SessionAuthentication',   #默认
        'rest_framework.authentication.BasicAuthentication',    #默认   #输入用户名和密码模式
        # 'rest_framework.authentication.TokenAuthentication',  #新加token验证类,验证用户信息
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',   #配置rest_framework_jwt，验证用户token并取出user   #token模式，最好放到view中
                                                                    #不放置到全局配置中，如果放置在全局中，token过期的话，
                                                                    # 访问不需要用户的页面也会受限制，例如查看所有商品页面
    ),

    #对API限速的配置
    'DEFAULT_THROTTLE_CLASSES': (  #这个是两个限速的类
        'rest_framework.throttling.AnonRateThrottle',   #用户未登录情况下，对未登录的用户（匿名用户）进行限速，通过ip地址来判断
        'rest_framework.throttling.UserRateThrottle'   #对登录的用户进行限速，通过token来判断
    ),
    'DEFAULT_THROTTLE_RATES': {    #这个是两个限速的规则
        'anon': '100/day',   #对匿名用户的设置 时间包括有： second, minute, hour or day ；  #一天100次
        'user': '1000/day'   #对登录用户的设置   #一天1000次
    }


}

import datetime   #导入datetime  ，设置时间用
JWT_AUTH = {      #配置JWT的配置
    'JWT_EXPIRATION_DELTA':datetime.timedelta(days=7),   #设置过期时间为7天
    'JWT_AUTH_HEADER_PREFIX':'JWT',    #配置token前面加的字段为‘JWT’ ,例如： JWT <token具体值>
}

#手机号码正则表达式
REGEX_MOBILE = "^1[358]\d{9}$|^147\d{8}$|^176\d{8}$"


#云片网设置
APIKEY = "d6c4ddbf50ab36611d2f52041a0b949e"


#支付宝相关配置
private_key_path = os.path.join(BASE_DIR,'apps/trade/keys/private_2048.txt')
ali_pub_key_path = os.path.join(BASE_DIR,'apps/trade/keys/alipay_key_2048.txt')
appid="2016080600180695"
app_notify_url="http://127.0.0.1:9000/alipay/return/",
return_url="http://127.0.0.1:9000/alipay/return/"

#drf-extensions缓存配置
REST_FRAMEWORK_EXTENSIONS = {
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60*15,   #设置缓存时间为5秒,设置为15分钟
}


#django-redis缓存配置,配置redis缓存
# CACHES = {
#     "default":{
#         "BACKEND":"django_redis.cache.RedisCache",
#         # "LOCATION":"redis://bobby@127.0.0.1:6379/1",   #配置有密码的redis,密码为bobby， /1:指的是数据库，也可以不加
#         "LOCATION":"redis://127.0.0.1:6379/1",   #在使用redis时，一定要将本地的redis server启动起来，网上自行查一下redis的安装以及redis client的使用
#         "OPTIONS":{
#             "CLIENT_CLASS":"django_redis.client.DefaultClient",
#         }
#     }
# }


#配置第三方登录，第三方开发平台应用的key
#配置微博的key
SOCIAL_AUTH_WEIBO_KEY = "237999617"    # WEIBO 要与Backend中的大写一致
SOCIAL_AUTH_WEIBO_SECRET = "2c60b652a3a0c649d1bb12ab8bb86a24"
#配置QQ的key
SOCIAL_AUTH_QQ_KEY = ""   # QQ 要与Backend中的大写一致
SOCIAL_AUTH_QQ_SECRET = ""
#配置微信的key
SOCIAL_AUTH_WEIXIN_KEY = ""  # WEIXIN 要与Backend中的大写一致
SOCIAL_AUTH_WEIXIN_SECRET = ""

SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/index/'   #配置第三方用户登录成功后跳转到的url


#sentry,raven配置
RAVEN_CONFIG = {
    'dsn':'http://2947956de96e47b48529ac4525da968:4ab0324f80a24c7f9b5faba8dcf9b8b5@47.92.87.172:9000/2',   #dsn配置
    # 'release': raven.fetch_git_sha(os.path.dirname(os.pardir)),   #这个是sentry与git相关的，此处不用，要配置git,必须把git目录拿过来，此处不配置
}